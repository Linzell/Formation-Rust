{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7","program":"/home/linzell/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","encoding_rs_io","/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=709234727d0651a0","-C","extra-filename=-709234727d0651a0","--out-dir","/media/linzell/Disque local/プロジェクト/Formation-Rust/grep/target/rls/debug/deps","-L","dependency=/media/linzell/Disque local/プロジェクト/Formation-Rust/grep/target/rls/debug/deps","--extern","encoding_rs=/media/linzell/Disque local/プロジェクト/Formation-Rust/grep/target/rls/debug/deps/libencoding_rs-5668d2f0cf773cf2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/linzell/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/media/linzell/Disque local/プロジェクト/Formation-Rust/grep/target/rls/debug/deps/libencoding_rs_io-709234727d0651a0.rmeta"},"prelude":{"crate_id":{"name":"encoding_rs_io","disambiguator":[18060535330450123063,0]},"crate_root":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src","external_crates":[{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14788966508543342302,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2825088610194081445,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9481142260376939403,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16420834686343379425,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11097033969885139948,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6800150773471260640,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9424233180753397496,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4493421558680613340,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10587786945246582611,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6037489587312533517,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[12999623613951624675,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[15285592788019233460,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[7690318462147983057,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16937637772373355212,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8216859446519220865,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[6387052066414425180,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[879344915155370202,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[12947071141408240460,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12545025351940724261,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":20,"id":{"name":"encoding_rs","disambiguator":[5076402565464871643,0]}},{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","num":21,"id":{"name":"cfg_if","disambiguator":[3771446270907224645,0]}}],"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":0,"byte_end":31795,"line_start":1,"line_end":878,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":0,"byte_end":31795,"line_start":1,"line_end":878,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":153},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":87},{"krate":0,"index":99},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":113}],"decl_id":null,"docs":"This crate provides streaming transcoding by implementing Rust's I/O traits\nand delegating transcoding to the\n[`encoding_rs`](https://crates.io/crates/encoding_rs)\ncrate.","sig":null,"attributes":[{"value":"*\nThis crate provides streaming transcoding by implementing Rust's I/O traits\nand delegating transcoding to the\n[`encoding_rs`](https://crates.io/crates/encoding_rs)\ncrate.\n\nCurrently, this crate only provides a means of transcoding from a source\nencoding (that is among the encodings supported by `encoding_rs`) to UTF-8 via\nan implementation of `std::io::Read`, where errors are handled by replacing\ninvalid sequences with the Unicode replacement character. Future work may\nprovide additional implementations for `std::io::Write` and/or implementations\nthat make stronger guarantees about UTF-8 validity.\n\n# Example\n\nThis example shows how to create a decoder that transcodes UTF-16LE (the\nsource) to UTF-8 (the destination).\n\n```\nextern crate encoding_rs;\nextern crate encoding_rs_io;\n\nuse std::error::Error;\nuse std::io::Read;\n\nuse encoding_rs_io::DecodeReaderBytes;\n\n# fn main() { example().unwrap(); }\nfn example() -> Result<(), Box<Error>> {\n    let source_data = &b\"\\xFF\\xFEf\\x00o\\x00o\\x00b\\x00a\\x00r\\x00\"[..];\n    // N.B. `source_data` can be any arbitrary io::Read implementation.\n    let mut decoder = DecodeReaderBytes::new(source_data);\n\n    let mut dest = String::new();\n    // decoder implements the io::Read trait, so it can easily be plugged\n    // into any consumer expecting an arbitrary reader.\n    decoder.read_to_string(&mut dest)?;\n    assert_eq!(dest, \"foobar\");\n    Ok(())\n}\n```\n\n# Future work\n\nCurrently, this crate only provides a way to get _possibly valid_ UTF-8 from\nsome source encoding. There are other transformations that may be useful that\nwe could include in this crate. Namely:\n\n* An encoder that accepts an arbitrary `std::io::Write` implementation and\n  takes valid UTF-8 and transcodes it to a selected destination encoding. This\n  encoder would implement `std::fmt::Write`.\n* A decoder that accepts an arbitrary `std::fmt::Write` implementation and\n  takes arbitrary bytes and transcodes them from a selected source\n  encoding to valid UTF-8. This decoder would implement `std::io::Write`.\n* An encoder that accepts an arbitrary `UnicodeRead` implementation and\n  takes valid UTF-8 and transcodes it to a selected destination encoding.\n  This encoder would implement `std::io::Read`.\n* A decoder that accepts an arbitrary `std::io::Read` implementation and\n  takes arbitrary bytes and transcodes them from a selected source encoding\n  to valid UTF-8. This decoder would implement the `UnicodeRead` trait.\n\nWhere `UnicodeRead` is a hypothetical trait that does not yet exist. Its\ndefinition might look something like this:\n\n```ignore\ntrait UnicodeRead {\n    fn read(&mut self, buf: &mut str) -> Result<usize>;\n}\n```\n\nInterestingly, of the above transformations, none of them correspond to\n`DecodeReaderBytes`. Namely, `DecodeReaderBytes` most closely corresponds to\nthe last option, but instead of guaranteeing valid UTF-8 by implementing a\ntrait like `UnicodeRead`, it instead implements `std::io::Read`, which pushes\nUTF-8 handling on to the caller. However, it turns out that this particular\nuse case is important for operations like search, which can often be written\nin a way that don't assume UTF-8 validity but still benefit from it.\n\nIt's not clear which of the above transformations is actually useful, but all\nof them could theoretically exist. There is more discussion on this topic\nhere (and in particular, the above formulation was taken almost verbatim from\nSimon Sapin's comments): https://github.com/hsivonen/encoding_rs/issues/8\n\nIt is also perhaps worth stating that this crate very much intends on\nremaining coupled to `encoding_rs`, which helps restrict the scope, but may be\ntoo biased toward Web oriented encoding to solve grander encoding challenges.\nAs such, it may very well be that this crate is actually a stepping stone to\nsomething with a larger scope. But first, we must learn.\n*/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":0,"byte_end":3852,"line_start":1,"line_end":89,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":153},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4123,"byte_end":4147,"line_start":104,"line_end":104,"column_start":12,"column_end":36},"name":"DecodeReaderBytesBuilder","qualname":"::DecodeReaderBytesBuilder","value":"DecodeReaderBytesBuilder {  }","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"decl_id":null,"docs":" A builder for constructing a byte oriented transcoder to UTF-8.\n","sig":null,"attributes":[{"value":"/ A builder for constructing a byte oriented transcoder to UTF-8.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4020,"byte_end":4087,"line_start":102,"line_end":102,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4814,"byte_end":4817,"line_start":125,"line_end":125,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodeReaderBytesBuilder>::new","value":"pub fn new() -> DecodeReaderBytesBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder builder with a default configuration.","sig":null,"attributes":[{"value":"/ Create a new decoder builder with a default configuration.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4464,"byte_end":4526,"line_start":119,"line_end":119,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4531,"byte_end":4534,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ By default, no explicit encoding is used, but if a UTF-8 or UTF-16","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4539,"byte_end":4609,"line_start":121,"line_end":121,"column_start":5,"column_end":75}},{"value":"/ BOM is detected, then an appropriate encoding is automatically","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4614,"byte_end":4680,"line_start":122,"line_end":122,"column_start":5,"column_end":71}},{"value":"/ detected and transcoding is performed (where invalid sequences map to","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4685,"byte_end":4758,"line_start":123,"line_end":123,"column_start":5,"column_end":78}},{"value":"/ the Unicode replacement codepoint).","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4763,"byte_end":4802,"line_start":124,"line_end":124,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5127,"byte_end":5132,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"build","qualname":"<DecodeReaderBytesBuilder>::build","value":"pub fn build<R: io::Read>(&Self, R) -> DecodeReaderBytes<R, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Build a new decoder that wraps the given reader.\n","sig":null,"attributes":[{"value":"/ Build a new decoder that wraps the given reader.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5063,"byte_end":5115,"line_start":135,"line_end":135,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5741,"byte_end":5758,"line_start":149,"line_end":149,"column_start":12,"column_end":29},"name":"build_with_buffer","qualname":"<DecodeReaderBytesBuilder>::build_with_buffer","value":"pub fn build_with_buffer<R: io::Read, B: AsMut<[u8]>>(&Self, R, B)\n-> io::Result<DecodeReaderBytes<R, B>>","parent":null,"children":[],"decl_id":null,"docs":" Build a new decoder that wraps the given reader and uses the given\n buffer internally for transcoding.","sig":null,"attributes":[{"value":"/ Build a new decoder that wraps the given reader and uses the given","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5276,"byte_end":5346,"line_start":140,"line_end":140,"column_start":5,"column_end":75}},{"value":"/ buffer internally for transcoding.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5351,"byte_end":5389,"line_start":141,"line_end":141,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5394,"byte_end":5397,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ This is useful for cases where it is advantageuous to amortize","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5402,"byte_end":5468,"line_start":143,"line_end":143,"column_start":5,"column_end":71}},{"value":"/ allocation. Namely, this method permits reusing a buffer for","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5473,"byte_end":5537,"line_start":144,"line_end":144,"column_start":5,"column_end":69}},{"value":"/ subsequent decoders.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5542,"byte_end":5566,"line_start":145,"line_end":145,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5571,"byte_end":5574,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This returns an error if the buffer is smaller than 4 bytes (which is","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5579,"byte_end":5652,"line_start":147,"line_end":147,"column_start":5,"column_end":78}},{"value":"/ too small to hold maximum size of a single UTF-8 encoded codepoint).","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":5657,"byte_end":5729,"line_start":148,"line_end":148,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7302,"byte_end":7310,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"encoding","qualname":"<DecodeReaderBytesBuilder>::encoding","value":"pub fn encoding(&mut Self, Option<&'static Encoding>)\n-> &mut DecodeReaderBytesBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set an explicit encoding to be used by this decoder.","sig":null,"attributes":[{"value":"/ Set an explicit encoding to be used by this decoder.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":6951,"byte_end":7007,"line_start":187,"line_end":187,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7012,"byte_end":7015,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ When an explicit encoding is set, BOM sniffing is disabled and the","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7020,"byte_end":7090,"line_start":189,"line_end":189,"column_start":5,"column_end":75}},{"value":"/ encoding provided will be used unconditionally. Errors in the encoded","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7095,"byte_end":7168,"line_start":190,"line_end":190,"column_start":5,"column_end":78}},{"value":"/ bytes are replaced by the Unicode replacement codepoint.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7173,"byte_end":7233,"line_start":191,"line_end":191,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7238,"byte_end":7241,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ By default, no explicit encoding is set.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7246,"byte_end":7290,"line_start":193,"line_end":193,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9410,"byte_end":9423,"line_start":247,"line_end":247,"column_start":12,"column_end":25},"name":"utf8_passthru","qualname":"<DecodeReaderBytesBuilder>::utf8_passthru","value":"pub fn utf8_passthru(&mut Self, bool) -> &mut DecodeReaderBytesBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable UTF-8 passthru, even when a UTF-8 BOM is observed.","sig":null,"attributes":[{"value":"/ Enable UTF-8 passthru, even when a UTF-8 BOM is observed.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7475,"byte_end":7536,"line_start":202,"line_end":202,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7541,"byte_end":7544,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ When an explicit encoding is not set (thereby invoking automatic","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7549,"byte_end":7617,"line_start":204,"line_end":204,"column_start":5,"column_end":73}},{"value":"/ encoding detection via BOM sniffing), then a UTF-8 BOM will cause","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7622,"byte_end":7691,"line_start":205,"line_end":205,"column_start":5,"column_end":74}},{"value":"/ UTF-8 transcoding to occur. In particular, if the source contains","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7696,"byte_end":7765,"line_start":206,"line_end":206,"column_start":5,"column_end":74}},{"value":"/ invalid UTF-8 sequences, then they are replaced with the Unicode","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7770,"byte_end":7838,"line_start":207,"line_end":207,"column_start":5,"column_end":73}},{"value":"/ replacement codepoint.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7843,"byte_end":7869,"line_start":208,"line_end":208,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7874,"byte_end":7877,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This transcoding may not be desirable. For example, the caller may","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7882,"byte_end":7952,"line_start":210,"line_end":210,"column_start":5,"column_end":75}},{"value":"/ already have its own UTF-8 handling where invalid UTF-8 is","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":7957,"byte_end":8019,"line_start":211,"line_end":211,"column_start":5,"column_end":67}},{"value":"/ appropriately handled, in which case, doing an extra transcoding","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8024,"byte_end":8092,"line_start":212,"line_end":212,"column_start":5,"column_end":73}},{"value":"/ step is extra and unnecessary work. Enabling this option will prevent","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8097,"byte_end":8170,"line_start":213,"line_end":213,"column_start":5,"column_end":78}},{"value":"/ that extra transcoding step from occurring. In this case, the bytes","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8175,"byte_end":8246,"line_start":214,"line_end":214,"column_start":5,"column_end":76}},{"value":"/ emitted by the reader are passed through unchanged (including the BOM)","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8251,"byte_end":8325,"line_start":215,"line_end":215,"column_start":5,"column_end":79}},{"value":"/ and the caller will be responsible for handling any invalid UTF-8.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8330,"byte_end":8400,"line_start":216,"line_end":216,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8405,"byte_end":8408,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8413,"byte_end":8426,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8431,"byte_end":8434,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ This example demonstrates the effect of enabling this option on data","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8439,"byte_end":8511,"line_start":220,"line_end":220,"column_start":5,"column_end":77}},{"value":"/ that includes a UTF-8 BOM but also, interestingly enough, subsequently","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8516,"byte_end":8590,"line_start":221,"line_end":221,"column_start":5,"column_end":79}},{"value":"/ includes invalid UTF-8.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8595,"byte_end":8622,"line_start":222,"line_end":222,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8627,"byte_end":8630,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8635,"byte_end":8642,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/ extern crate encoding_rs;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8647,"byte_end":8676,"line_start":225,"line_end":225,"column_start":5,"column_end":34}},{"value":"/ extern crate encoding_rs_io;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8681,"byte_end":8713,"line_start":226,"line_end":226,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8718,"byte_end":8721,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8726,"byte_end":8752,"line_start":228,"line_end":228,"column_start":5,"column_end":31}},{"value":"/ use std::io::Read;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8757,"byte_end":8779,"line_start":229,"line_end":229,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8784,"byte_end":8787,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ use encoding_rs_io::DecodeReaderBytesBuilder;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8792,"byte_end":8841,"line_start":231,"line_end":231,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8846,"byte_end":8849,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8854,"byte_end":8893,"line_start":233,"line_end":233,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<Error>> {","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8898,"byte_end":8942,"line_start":234,"line_end":234,"column_start":5,"column_end":49}},{"value":"/     let source_data = &b\"\\xEF\\xBB\\xBFfoo\\xFFbar\"[..];","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":8947,"byte_end":9004,"line_start":235,"line_end":235,"column_start":5,"column_end":62}},{"value":"/     let mut decoder = DecodeReaderBytesBuilder::new()","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9009,"byte_end":9066,"line_start":236,"line_end":236,"column_start":5,"column_end":62}},{"value":"/         .utf8_passthru(true)","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9071,"byte_end":9103,"line_start":237,"line_end":237,"column_start":5,"column_end":37}},{"value":"/         .build(source_data);","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9108,"byte_end":9140,"line_start":238,"line_end":238,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9145,"byte_end":9148,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/     let mut dest = vec![];","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9153,"byte_end":9183,"line_start":240,"line_end":240,"column_start":5,"column_end":35}},{"value":"/     decoder.read_to_end(&mut dest)?;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9188,"byte_end":9228,"line_start":241,"line_end":241,"column_start":5,"column_end":45}},{"value":"/     // Without the passthru option, you'd get \"foo\\u{FFFD}bar\".","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9233,"byte_end":9300,"line_start":242,"line_end":242,"column_start":5,"column_end":72}},{"value":"/     assert_eq!(dest, b\"\\xEF\\xBB\\xBFfoo\\xFFbar\");","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9305,"byte_end":9357,"line_start":243,"line_end":243,"column_start":5,"column_end":57}},{"value":"/     Ok(())","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9362,"byte_end":9376,"line_start":244,"line_end":244,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9381,"byte_end":9386,"line_start":245,"line_end":245,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9391,"byte_end":9398,"line_start":246,"line_end":246,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10831,"byte_end":10840,"line_start":292,"line_end":292,"column_start":12,"column_end":21},"name":"strip_bom","qualname":"<DecodeReaderBytesBuilder>::strip_bom","value":"pub fn strip_bom(&mut Self, bool) -> &mut DecodeReaderBytesBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether or not to always strip a BOM if one is found.","sig":null,"attributes":[{"value":"/ Whether or not to always strip a BOM if one is found.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9562,"byte_end":9619,"line_start":255,"line_end":255,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9624,"byte_end":9627,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ When this is enabled, if a BOM is found at the beginning of a stream,","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9632,"byte_end":9705,"line_start":257,"line_end":257,"column_start":5,"column_end":78}},{"value":"/ then it is ignored. This applies even when `utf8_passthru` is enabled","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9710,"byte_end":9783,"line_start":258,"line_end":258,"column_start":5,"column_end":78}},{"value":"/ or if `bom_sniffing` is disabled.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9788,"byte_end":9825,"line_start":259,"line_end":259,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9830,"byte_end":9833,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ This is disabled by default.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9838,"byte_end":9870,"line_start":261,"line_end":261,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9875,"byte_end":9878,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9883,"byte_end":9896,"line_start":263,"line_end":263,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9901,"byte_end":9904,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ This example shows how to remove the BOM if it's present even when","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9909,"byte_end":9979,"line_start":265,"line_end":265,"column_start":5,"column_end":75}},{"value":"/ `utf8_passthru` is enabled.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":9984,"byte_end":10015,"line_start":266,"line_end":266,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10020,"byte_end":10023,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10028,"byte_end":10035,"line_start":268,"line_end":268,"column_start":5,"column_end":12}},{"value":"/ extern crate encoding_rs;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10040,"byte_end":10069,"line_start":269,"line_end":269,"column_start":5,"column_end":34}},{"value":"/ extern crate encoding_rs_io;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10074,"byte_end":10106,"line_start":270,"line_end":270,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10111,"byte_end":10114,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10119,"byte_end":10145,"line_start":272,"line_end":272,"column_start":5,"column_end":31}},{"value":"/ use std::io::Read;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10150,"byte_end":10172,"line_start":273,"line_end":273,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10177,"byte_end":10180,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ use encoding_rs_io::DecodeReaderBytesBuilder;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10185,"byte_end":10234,"line_start":275,"line_end":275,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10239,"byte_end":10242,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10247,"byte_end":10286,"line_start":277,"line_end":277,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<Error>> {","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10291,"byte_end":10335,"line_start":278,"line_end":278,"column_start":5,"column_end":49}},{"value":"/     let source_data = &b\"\\xEF\\xBB\\xBFfoo\\xFFbar\"[..];","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10340,"byte_end":10397,"line_start":279,"line_end":279,"column_start":5,"column_end":62}},{"value":"/     let mut decoder = DecodeReaderBytesBuilder::new()","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10402,"byte_end":10459,"line_start":280,"line_end":280,"column_start":5,"column_end":62}},{"value":"/         .utf8_passthru(true)","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10464,"byte_end":10496,"line_start":281,"line_end":281,"column_start":5,"column_end":37}},{"value":"/         .strip_bom(true)","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10501,"byte_end":10529,"line_start":282,"line_end":282,"column_start":5,"column_end":33}},{"value":"/         .build(source_data);","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10534,"byte_end":10566,"line_start":283,"line_end":283,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10571,"byte_end":10574,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/     let mut dest = vec![];","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10579,"byte_end":10609,"line_start":285,"line_end":285,"column_start":5,"column_end":35}},{"value":"/     decoder.read_to_end(&mut dest)?;","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10614,"byte_end":10654,"line_start":286,"line_end":286,"column_start":5,"column_end":45}},{"value":"/     // If `strip_bom` wasn't enabled, then this would include the BOM.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10659,"byte_end":10733,"line_start":287,"line_end":287,"column_start":5,"column_end":79}},{"value":"/     assert_eq!(dest, b\"foo\\xFFbar\");","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10738,"byte_end":10778,"line_start":288,"line_end":288,"column_start":5,"column_end":45}},{"value":"/     Ok(())","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10783,"byte_end":10797,"line_start":289,"line_end":289,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10802,"byte_end":10807,"line_start":290,"line_end":290,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10812,"byte_end":10819,"line_start":291,"line_end":291,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11318,"byte_end":11330,"line_start":306,"line_end":306,"column_start":12,"column_end":24},"name":"bom_override","qualname":"<DecodeReaderBytesBuilder>::bom_override","value":"pub fn bom_override(&mut Self, bool) -> &mut DecodeReaderBytesBuilder","parent":null,"children":[],"decl_id":null,"docs":" Give the highest precedent to the BOM, if one is found.","sig":null,"attributes":[{"value":"/ Give the highest precedent to the BOM, if one is found.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":10952,"byte_end":11011,"line_start":297,"line_end":297,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11016,"byte_end":11019,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ When this is enabled, and if a BOM is found, then the encoding","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11024,"byte_end":11090,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/ indicated by that BOM is used even if an explicit encoding has been","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11095,"byte_end":11166,"line_start":300,"line_end":300,"column_start":5,"column_end":76}},{"value":"/ set via the `encoding` method.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11171,"byte_end":11205,"line_start":301,"line_end":301,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11210,"byte_end":11213,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This does not override `utf8_passthru`.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11218,"byte_end":11261,"line_start":303,"line_end":303,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11266,"byte_end":11269,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ This is disabled by default.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11274,"byte_end":11306,"line_start":305,"line_end":305,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11904,"byte_end":11916,"line_start":324,"line_end":324,"column_start":12,"column_end":24},"name":"bom_sniffing","qualname":"<DecodeReaderBytesBuilder>::bom_sniffing","value":"pub fn bom_sniffing(&mut Self, bool) -> &mut DecodeReaderBytesBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable BOM sniffing","sig":null,"attributes":[{"value":"/ Enable BOM sniffing","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11468,"byte_end":11491,"line_start":314,"line_end":314,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11496,"byte_end":11499,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ When this is enabled and an explicit encoding is not set, the decoder","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11504,"byte_end":11577,"line_start":316,"line_end":316,"column_start":5,"column_end":78}},{"value":"/ will try to detect the encoding with BOM.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11582,"byte_end":11627,"line_start":317,"line_end":317,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11632,"byte_end":11635,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ When this is disabled and an explicit encoding is not set, the decoder","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11640,"byte_end":11714,"line_start":319,"line_end":319,"column_start":5,"column_end":79}},{"value":"/ will treat the input as raw bytes. The bytes will be passed through","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11719,"byte_end":11790,"line_start":320,"line_end":320,"column_start":5,"column_end":76}},{"value":"/ unchanged, including any BOM that may be present.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11795,"byte_end":11848,"line_start":321,"line_end":321,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11853,"byte_end":11856,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ This is enabled by default.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":11861,"byte_end":11892,"line_start":323,"line_end":323,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":87},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":13298,"byte_end":13315,"line_start":355,"line_end":355,"column_start":12,"column_end":29},"name":"DecodeReaderBytes","qualname":"::DecodeReaderBytes","value":"DecodeReaderBytes {  }","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"decl_id":null,"docs":" An implementation of `io::Read` that transcodes to UTF-8 in a streaming\n fashion.","sig":null,"attributes":[{"value":"/ An implementation of `io::Read` that transcodes to UTF-8 in a streaming","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12052,"byte_end":12127,"line_start":333,"line_end":333,"column_start":1,"column_end":76}},{"value":"/ fashion.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12128,"byte_end":12140,"line_start":334,"line_end":334,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12141,"byte_end":12144,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ The high level goal of this decoder is to provide access to byte streams","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12145,"byte_end":12221,"line_start":336,"line_end":336,"column_start":1,"column_end":77}},{"value":"/ that are assumed to be UTF-8 unless an encoding is otherwise specified","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12222,"byte_end":12296,"line_start":337,"line_end":337,"column_start":1,"column_end":75}},{"value":"/ (either via a BOM or via an explicit designation of an encoding).","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12297,"byte_end":12366,"line_start":338,"line_end":338,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12367,"byte_end":12370,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ When no explicit source encoding is specified (via","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12371,"byte_end":12425,"line_start":340,"line_end":340,"column_start":1,"column_end":55}},{"value":"/ `DecodeReaderBytesBuilder`), the source encoding is determined by","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12426,"byte_end":12495,"line_start":341,"line_end":341,"column_start":1,"column_end":70}},{"value":"/ inspecting the BOM from the stream read from `R`, if one exists. If a","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12496,"byte_end":12569,"line_start":342,"line_end":342,"column_start":1,"column_end":74}},{"value":"/ UTF-16 BOM exists, then the source stream is transcoded to UTF-8 with","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12570,"byte_end":12643,"line_start":343,"line_end":343,"column_start":1,"column_end":74}},{"value":"/ invalid UTF-16 sequences translated to the Unicode replacement character.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12644,"byte_end":12721,"line_start":344,"line_end":344,"column_start":1,"column_end":78}},{"value":"/ Similarly if a UTF-8 BOM is seen. In all other cases, the source of the","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12722,"byte_end":12797,"line_start":345,"line_end":345,"column_start":1,"column_end":76}},{"value":"/ underlying reader is passed through unchanged _as if_ it were UTF-8.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12798,"byte_end":12870,"line_start":346,"line_end":346,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12871,"byte_end":12874,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ Since this particular reader does not guarantee providing valid UTF-8 to","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12875,"byte_end":12951,"line_start":348,"line_end":348,"column_start":1,"column_end":77}},{"value":"/ the caller, the caller must be prepared to handle invalid UTF-8 itself.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":12952,"byte_end":13027,"line_start":349,"line_end":349,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":13028,"byte_end":13031,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ `R` is the type of the underlying reader and `B` is the type of an internal","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":13032,"byte_end":13111,"line_start":351,"line_end":351,"column_start":1,"column_end":80}},{"value":"/ buffer used to store the results of transcoding. Callers may elect to reuse","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":13112,"byte_end":13191,"line_start":352,"line_end":352,"column_start":1,"column_end":80}},{"value":"/ the internal buffer via the `DecodeReaderBytesBuilder::build_with_buffer`","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":13192,"byte_end":13269,"line_start":353,"line_end":353,"column_start":1,"column_end":78}},{"value":"/ constructor.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":13270,"byte_end":13286,"line_start":354,"line_end":354,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15570,"byte_end":15573,"line_start":410,"line_end":410,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodeReaderBytes<R, Vec<u8>>>::new","value":"pub fn new(R) -> DecodeReaderBytes<R, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new transcoder that converts a source stream to valid UTF-8\n via BOM sniffing.","sig":null,"attributes":[{"value":"/ Create a new transcoder that converts a source stream to valid UTF-8","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":14849,"byte_end":14921,"line_start":395,"line_end":395,"column_start":5,"column_end":77}},{"value":"/ via BOM sniffing.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":14926,"byte_end":14947,"line_start":396,"line_end":396,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":14952,"byte_end":14955,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ To explicitly control the encoding, UTF-8 passthru or amortize","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":14960,"byte_end":15026,"line_start":398,"line_end":398,"column_start":5,"column_end":71}},{"value":"/ allocation, use the","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15031,"byte_end":15054,"line_start":399,"line_end":399,"column_start":5,"column_end":28}},{"value":"/ [`DecodeReaderBytesBuilder`](struct.DecodeReaderBytesBuilder.html)","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15059,"byte_end":15129,"line_start":400,"line_end":400,"column_start":5,"column_end":75}},{"value":"/ constructor.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15134,"byte_end":15150,"line_start":401,"line_end":401,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15155,"byte_end":15158,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ When a BOM is found (which must correspond to UTF-8, UTF-16LE or","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15163,"byte_end":15231,"line_start":403,"line_end":403,"column_start":5,"column_end":73}},{"value":"/ UTF-16BE), then transcoding to UTF-8 is performed and any invalid","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15236,"byte_end":15305,"line_start":404,"line_end":404,"column_start":5,"column_end":74}},{"value":"/ sequences in the source data are seamlessly replaced by the Unicode","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15310,"byte_end":15381,"line_start":405,"line_end":405,"column_start":5,"column_end":76}},{"value":"/ replacement character.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15386,"byte_end":15412,"line_start":406,"line_end":406,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15417,"byte_end":15420,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ When no BOM is found (and no other encoding is specified via the","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15425,"byte_end":15493,"line_start":408,"line_end":408,"column_start":5,"column_end":73}},{"value":"/ builder), the underlying bytes are passed through as-is.","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15498,"byte_end":15558,"line_start":409,"line_end":409,"column_start":5,"column_end":65}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/util.rs","byte_start":33330,"byte_end":33344,"line_start":37,"line_end":37,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/util.rs","byte_start":35161,"byte_end":35175,"line_start":88,"line_end":88,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/util.rs","byte_start":35826,"byte_end":35835,"line_start":114,"line_end":114,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/util.rs","byte_start":37195,"byte_end":37204,"line_start":150,"line_end":150,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/util.rs","byte_start":38405,"byte_end":38416,"line_start":185,"line_end":185,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4305,"byte_end":4329,"line_start":112,"line_end":112,"column_start":18,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4433,"byte_end":4457,"line_start":118,"line_end":118,"column_start":6,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":14548,"byte_end":14565,"line_start":383,"line_end":383,"column_start":48,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":14813,"byte_end":14830,"line_start":394,"line_end":394,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15711,"byte_end":15728,"line_start":415,"line_end":415,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":21322,"byte_end":21339,"line_start":557,"line_end":557,"column_start":51,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/util.rs","byte_start":33330,"byte_end":33344,"line_start":37,"line_end":37,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/util.rs","byte_start":35161,"byte_end":35175,"line_start":88,"line_end":88,"column_start":19,"column_end":33},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":117},"to":{"krate":1,"index":4631}},{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/util.rs","byte_start":35826,"byte_end":35835,"line_start":114,"line_end":114,"column_start":19,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/util.rs","byte_start":37195,"byte_end":37204,"line_start":150,"line_end":150,"column_start":32,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":126},"to":{"krate":1,"index":4631}},{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/util.rs","byte_start":38405,"byte_end":38416,"line_start":185,"line_end":185,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4305,"byte_end":4329,"line_start":112,"line_end":112,"column_start":18,"column_end":42},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":153},"to":{"krate":2,"index":3002}},{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":4433,"byte_end":4457,"line_start":118,"line_end":118,"column_start":6,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":14548,"byte_end":14565,"line_start":383,"line_end":383,"column_start":48,"column_end":65},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":87},"to":{"krate":1,"index":4631}},{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":14813,"byte_end":14830,"line_start":394,"line_end":394,"column_start":19,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":87},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":15711,"byte_end":15728,"line_start":415,"line_end":415,"column_start":35,"column_end":52},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":87},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/linzell/.cargo/registry/src/github.com-1ecc6299db9ec823/encoding_rs_io-0.1.7/src/lib.rs","byte_start":21322,"byte_end":21339,"line_start":557,"line_end":557,"column_start":51,"column_end":68},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":87},"to":{"krate":2,"index":9595}}]}